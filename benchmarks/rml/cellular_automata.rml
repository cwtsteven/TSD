(* ReactiveML : interactive simulation with rmltop  *)
(* n-body simulation                                *)

type state = Zero | One 

type cell = {id : int; state: state}

(* Global signal *)
(*signal env default (Array.make 100000 Zero) gather (fun x y -> let {id=id;state=state} = x in Array.set y id state; y);; *)
signal env default [] gather (fun x y -> x :: y);; 
signal kill

let rec get_nth l n = 
  match l with
  | [] -> failwith "out of bound. "
  | {id=id;state=state} :: xs -> if n == id then state else get_nth xs n

(* modified by Steven *)
let update_display all = 
  List.iter (fun {state=state} -> print_int (if state == One then 1 else 0)) all;
  print_newline()

(* modified by Steven *)
let process window =
  do
    loop
      await env (all) in 
      update_display all
    end
  until kill done 

let get_neighbour i all = 
  if i == 0 then (Zero, get_nth all (i), get_nth all (i+1))
  else if i == ((List.length all) - 1) then (get_nth all (i-1), get_nth all (i), Zero)
  else (get_nth all (i-1), get_nth all (i), get_nth all (i+1)) 

let rule110 a b c = 
  match (a,b,c) with
  | (One, One, One) -> Zero
  | (One, One, Zero) -> One
  | (One, Zero, One) -> One
  | (One, Zero, Zero) -> Zero
  | (Zero, One, One) -> One
  | (Zero, One, Zero) -> One
  | (Zero, Zero, One) -> One
  | (Zero, Zero, Zero) -> Zero

let rule54 a b c = 
  match (a,b,c) with
  | (One, One, One) -> Zero
  | (One, One, Zero) -> Zero
  | (One, Zero, One) -> One
  | (One, Zero, Zero) -> One
  | (Zero, One, One) -> Zero
  | (Zero, One, Zero) -> One
  | (Zero, Zero, One) -> One
  | (Zero, Zero, Zero) -> Zero

let process cell_process id init =
  let me = ref {id=id; state=init} in 
  do
    loop
      emit env !me; 
      await env (all) in 
      let (a,b,c) = get_neighbour id all in 
      let new_state = rule54 a b c in 
      me := {id=id; state=new_state} 
    end
  until kill done
;;

let count = ref 1 

let process kill_all n = 
  do 
    loop
      await env (all) in 
      if (!count > n) 
      then 
        emit kill
      else 
        (count := !count + 1;
        nothing)
    end
  until kill done
;;

let _ = 
  let size = int_of_string (Sys.argv.(1)) in 
  let total_step = int_of_string (Sys.argv.(2)) in
  run kill_all total_step (*|| run window*) || for i = 0 to (size - 1) dopar run cell_process i (if i == (size)/2 then One else Zero) done 

(* #run sun;; *)

(* #exec (for i = 1 to 50 dopar run planet done);; *)

