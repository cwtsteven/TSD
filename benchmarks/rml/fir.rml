open List

signal kill
signal inp default 0.0 gather (+.) 
signal out default 0.0 gather (+.)

let rec shift v = function
  | [] -> [] 
  | x :: y :: [] -> v :: x :: []
  | x :: xs -> v :: shift x xs

let rec zip xs ys = 
  match (xs, ys) with 
  | [], [] -> []
  | x :: xs, y :: ys -> (x, y) :: zip xs ys 

let rec replicate n x = 
  match n with 
  | 0 -> []
  | n -> x :: replicate (n-1) x

let process fir inp ws = 
  let xs = ref (replicate (length ws) 0.0) in 
  do
  	loop 
    	await inp(v) in 
    	xs := shift v !xs; 
    	emit out (fold_left (fun sum (w, s) -> sum +. w *. s) 0.0 (zip ws !xs))
  	end
  until kill -> () 
  done 

let process print_out out =
  do
  	loop 
    	await out(v) in 
    	print_float v;
    	print_newline(); 
  	end
  until kill -> () 
  done 

let process inc n = 
  let x = ref 0.0 in 
  for i = 1 to n do 
    emit inp !x; 
    x := !x +. 1.0; 
    pause;
  done;
  emit kill 

let _ =
  let p = int_of_string Sys.argv.(1) in
  let n = int_of_string Sys.argv.(2) in 
  run fir inp (replicate p 1.0) || run inc (n+2) (* || run print_out out *)